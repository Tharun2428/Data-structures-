Array implementation of queue




#include <stdio.h>

#define MAX 5

int Queue[MAX], front = -1, rear = -1;

int IsFull();
int IsEmpty();

void Enqueue(int ele);
void Dequeue();
void Display();

int main() {
    int ch = 0, e;

    while (ch != 4) {
        printf("1.ENQUEUE 2.DEQUEUE 3.DISPLAY 4.EXIT\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch(ch) {
            case 1:
                printf("Enter the element: ");
                scanf("%d", &e);
                Enqueue(e);
                break;
            case 2:
                Dequeue();
                break;
            case 3:
                Display();
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please enter a number between 1 and 4.\n");
                break;
        }
    }

    return 0;
}

int IsFull() {
    if(rear == MAX - 1)
        return 1;
    return 0;
}

int IsEmpty() {
    if(front == -1 || front > rear)
        return 1;
    return 0;
}

void Enqueue(int ele) {
    if(IsFull())
        printf("Queue is Overflow...!\n");
    else {
        rear++;
        Queue[rear] = ele;
        if(front == -1)
            front = 0;
    }
}

void Dequeue() {
    if(IsEmpty())
        printf("Queue is Underflow...!\n");
    else {
        printf("%d\n", Queue[front]);
        if(front == rear)
            front = rear = -1;
        else
            front++;
    }
}

void Display() {
    int i;
    if(IsEmpty())
        printf("Queue is Underflow...!\n");
    else {
        printf("Queue elements: ");
        for(i = front; i <= rear; i++)
            printf("%d\t", Queue[i]);
        printf("\n");
    }
}




Linkedlist implementation of queue 

#include <stdio.h>
#include <stdlib.h>

struct node {
    int Element;
    struct node *Next;
};

typedef struct node Queue;

Queue *Front = NULL, *Rear = NULL;

int IsEmpty(Queue *List);
void Enqueue(int e);
void Dequeue();
void Display();

int main() {
    int ch, e;

    printf("1. ENQUEUE\n2. DEQUEUE\n3. DISPLAY\n4. EXIT\n");

    while (ch!=4) {
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                printf("Enter the element: ");
                scanf("%d", &e);
                Enqueue(e);
                break;
            case 2:
                Dequeue();
                break;
            case 3:
                Display();
                break;
            case 4:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}

int IsEmpty(Queue *List) {
    if (List == NULL)
        return 1;
    else
        return 0;
}

void Enqueue(int e) {
    Queue *NewNode = (Queue*)malloc(sizeof(Queue));
    NewNode->Element = e;
    NewNode->Next = NULL;

    if (Rear == NULL) {
        Front = Rear = NewNode;
    } else {
        Rear->Next = NewNode;
        Rear = NewNode;
    }
}

void Dequeue() {
    if (IsEmpty(Front)) {
        printf("Queue is Underflow...!\n");
    } else {
        Queue *TempNode = Front;
        Front = Front->Next;
        
        if (Front == NULL) {
            Rear = NULL;
        }

        printf("Dequeued element: %d\n", TempNode->Element);
        free(TempNode);
    }
}

void Display() {
    if (IsEmpty(Front)) {
        printf("Queue is Underflow...!\n");
    } else {
        Queue *Position = Front;
        printf("Queue elements: ");
        
        while (Position != NULL) {
            printf("%d\t", Position->Element);
            Position = Position->Next;
        }
        printf("\n");
    }
}
